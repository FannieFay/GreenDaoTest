package com.example.mydbtest.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.mydbtest.db.Book;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BOOK.
*/
public class BookDao extends AbstractDao<Book, String> {

    public static final String TABLENAME = "BOOK";

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property BookID = new Property(0, String.class, "bookID", true, "BOOK_ID");
        public final static Property BookName = new Property(1, String.class, "bookName", false, "BOOK_NAME");
        public final static Property BookUrl = new Property(2, String.class, "bookUrl", false, "BOOK_URL");
        public final static Property Author = new Property(3, String.class, "author", false, "AUTHOR");
        public final static Property State = new Property(4, String.class, "state", false, "STATE");
        public final static Property Introduce = new Property(5, String.class, "introduce", false, "INTRODUCE");
        public final static Property LastChapterUrl = new Property(6, String.class, "lastChapterUrl", false, "LAST_CHAPTER_URL");
        public final static Property LastChapterName = new Property(7, String.class, "lastChapterName", false, "LAST_CHAPTER_NAME");
    };

    private DaoSession daoSession;


    public BookDao(DaoConfig config) {
        super(config);
    }
    
    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BOOK' (" + //
                "'BOOK_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: bookID
                "'BOOK_NAME' TEXT," + // 1: bookName
                "'BOOK_URL' TEXT," + // 2: bookUrl
                "'AUTHOR' TEXT," + // 3: author
                "'STATE' TEXT," + // 4: state
                "'INTRODUCE' TEXT," + // 5: introduce
                "'LAST_CHAPTER_URL' TEXT," + // 6: lastChapterUrl
                "'LAST_CHAPTER_NAME' TEXT);"); // 7: lastChapterName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BOOK'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();
 
        String bookID = entity.getBookID();
        if (bookID != null) {
            stmt.bindString(1, bookID);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(2, bookName);
        }
 
        String bookUrl = entity.getBookUrl();
        if (bookUrl != null) {
            stmt.bindString(3, bookUrl);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(4, author);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(5, state);
        }
 
        String introduce = entity.getIntroduce();
        if (introduce != null) {
            stmt.bindString(6, introduce);
        }
 
        String lastChapterUrl = entity.getLastChapterUrl();
        if (lastChapterUrl != null) {
            stmt.bindString(7, lastChapterUrl);
        }
 
        String lastChapterName = entity.getLastChapterName();
        if (lastChapterName != null) {
            stmt.bindString(8, lastChapterName);
        }
    }

    @Override
    protected void attachEntity(Book entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // bookID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bookName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bookUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // author
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // state
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // introduce
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lastChapterUrl
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // lastChapterName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setBookID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBookName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBookUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAuthor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setState(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIntroduce(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLastChapterUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLastChapterName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Book entity, long rowId) {
        return entity.getBookID();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Book entity) {
        if(entity != null) {
            return entity.getBookID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
